# .github/workflows/release.yml
name: Build and Release APK

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # Allows manual triggering
  pull_request:       # Test builds on PRs
    branches: [ main, develop, master ]

env:
  # Use the latest LTS Java version
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Run tests
      run: ./gradlew test
      
    - name: Build debug APK
      run: ./gradlew assembleUnstableDebug

  build-and-release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0  # Fetch full history for proper versioning
        
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0
        cmake-version: 3.22.1
        ndk-version: 26.1.10909125
        
    - name: Accept Android SDK licenses
      run: yes | sdkmanager --licenses || true
      
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
        
    - name: Update version in build.gradle
      run: |
        VERSION=${{ steps.version.outputs.VERSION }}
        # Remove 'v' prefix if present
        VERSION_CODE=$(echo $VERSION | sed 's/^v//' | sed 's/\.//' | sed 's/\.//')
        VERSION_NAME=$(echo $VERSION | sed 's/^v//')
        
        # Update version in gradle file (adjust path as needed)
        sed -i "s/versionCode.*/versionCode $VERSION_CODE/" java/build.gradle
        sed -i "s/versionName.*/versionName \"$VERSION_NAME\"/" java/build.gradle
        
    - name: Build release APK
      run: ./gradlew assembleStableRelease
      
    - name: Build debug APK
      run: ./gradlew assembleUnstableDebug
      
    - name: Sign APK (if keystore available)
      if: env.KEYSTORE_FILE != ''
      env:
        KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        # Decode keystore from base64
        echo $KEYSTORE_FILE | base64 -d > keystore.jks
        
        # Sign the APK
        jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
          -keystore keystore.jks \
          -storepass $KEYSTORE_PASSWORD \
          -keypass $KEY_PASSWORD \
          java/build/outputs/apk/stable/release/android-keyboard-stable-release-unsigned.apk \
          $KEY_ALIAS
          
        # Align the APK
        zipalign -v 4 \
          java/build/outputs/apk/stable/release/android-keyboard-stable-release-unsigned.apk \
          java/build/outputs/apk/stable/release/android-keyboard-stable-release.apk
        
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          CHANGELOG="Initial release"
        fi
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: "FUTO Keyboard Fork ${{ steps.version.outputs.VERSION }}"
        body: |
          ## üöÄ FUTO Keyboard Fork Release ${{ steps.version.outputs.VERSION }}
          
          ### Voice Agent Integration
          Custom FUTO Keyboard fork with integrated voice agent support.
          
          ### Changes
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ### Installation
          1. Download the APK below
          2. Install via Obtainium: `https://github.com/${{ github.repository }}`
          3. Enable the keyboard in Android settings
          4. Configure your voice agent endpoint
          
          ### System Requirements
          - Android 8.0+ (API level 26)
          - Tailscale app (for secure voice agent access)
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, 'beta') || contains(steps.version.outputs.VERSION, 'alpha') }}
        files: |
          java/build/outputs/apk/stable/release/*.apk
          java/build/outputs/apk/unstable/debug/*.apk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: apk-files-${{ steps.version.outputs.VERSION }}
        path: |
          java/build/outputs/apk/stable/release/*.apk
          java/build/outputs/apk/unstable/debug/*.apk
        retention-days: 90

  # # Notification job (optional)
  # notify:
  #   runs-on: ubuntu-latest
  #   needs: [build-and-release]
  #   if: always() && startsWith(github.ref, 'refs/tags/v')
    
  #   steps:
  #   - name: Notify success
  #     if: needs.build-and-release.result == 'success'
  #     run: |
  #       echo "‚úÖ Release ${{ github.ref_name }} built successfully!"
  #       # Add webhook notification here if desired
        
  #   - name: Notify failure
  #     if: needs.build-and-release.result == 'failure'
  #     run: |
  #       echo "‚ùå Release ${{ github.ref_name }} build failed!"
  #       # Add webhook notification here if desired